{"version":3,"sources":["helpers/getArrGifs.js","components/Admli.js","hooks/useFetchGifs.js","ShowGifsGIPHY.js","index.js"],"names":["getArrGifs","Categoria","a","url","encodeURI","fetch","resp","json","data","ArrGifs","map","x","id","title","images","downsized_medium","Admli","useState","ArrImagenes","Cargando","ObjArrImagenes","SetObjArrImagenes","useEffect","then","useFetchGifs","className","src","alt","ShowGifsGIPHY","TxtCategoriaValor","SetTxtCategoriaValor","ArrCategorias","SetArrCategorias","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","name","ReactDOM","render","document","getElementById"],"mappings":"2NAEaA,EAAU,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAUH,GAD5C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAUD,EAAKE,KAAI,SAACC,GAAK,IAAD,EAC1B,MAAO,CACAC,GAAID,EAAEC,GACNC,MAAOF,EAAEE,MACTV,IAAG,UAAEQ,EAAEG,cAAJ,aAAE,EAAUC,iBAAiBZ,QATtB,kBAgBdM,GAhBc,4CAAF,sD,OCCVO,EAAQ,SAAC,GAAiB,IAAhBf,EAAe,EAAfA,UAEnB,ECFwB,SAACA,GAEzB,MAA4CgB,mBAAS,CACjDC,YAAa,GACbC,UAAU,IAFd,mBAAOC,EAAP,KAAuBC,EAAvB,KAoBA,OAfAC,qBAAU,WACNtB,EAAWC,GACVsB,MAAK,SAACd,GACHY,EAAkB,CACdH,YAAYT,EACZU,UAAU,SAQpB,CAAClB,IAEImB,EDpBwBI,CAAavB,GAArCiB,EAAP,EAAOA,YAAYC,EAAnB,EAAmBA,SACnB,OACI,sBAAKM,UAAU,YAAf,UACI,qBAAIA,UAAU,oCAAd,wBAA+DxB,KAO9DkB,GAAY,mBAAGM,UAAU,mCAAb,yBACb,6BAEQP,EAAYR,KAAI,YAAoB,IAAlBG,EAAiB,EAAjBA,MAAMV,EAAW,EAAXA,IAAIS,EAAO,EAAPA,GACxB,OACQ,sBAAca,UAAU,yCAAxB,UACI,qBAAKC,IAAKvB,EACLwB,IAAKd,IACV,4BAAIA,MAHED,YE0B3BgB,EA3CO,WAClB,MAAkDX,mBAAS,IAA3D,mBAAOY,EAAP,KAA0BC,EAA1B,KACA,EAA0Cb,mBAAU,CAAC,cAArD,mBAAOc,EAAP,KAAsBC,EAAtB,KAoBA,OACQ,uBAAMC,SAZW,SAACC,GACtBA,EAAEC,iBAEEN,EAAkBO,OAAOC,OAAO,IAChCL,GAAiB,SAACD,GAAD,OAAkBF,GAAlB,mBAAwCE,OACzDD,EAAqB,MAOrB,UACI,+CACA,uBACIQ,KAAK,OACLC,MAAOV,EACPW,SAvBU,SAACN,GACvBJ,EAAqBI,EAAEO,OAAOF,QAuBlBG,KAAK,iBAET,uBACA,6BAEQX,EAAcrB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAOwB,UAAU,iEACTxB,UAAWA,GADoEA,YCjCnH0C,IAASC,OAAO,cAAC,EAAD,IAAmBC,SAASC,eAAe,W","file":"static/js/main.5114c6a9.chunk.js","sourcesContent":["\r\n\r\nexport const getArrGifs =async(Categoria)=> {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(Categoria) }&limit=10&api_key=3enA7rbUd95herOu2DmFinlXSOdi2Box`;\r\n    const resp = await fetch(url)\r\n    const {data} = await resp.json();\r\n\r\n    const ArrGifs = data.map((x)=>{\r\n        return {\r\n               id: x.id,\r\n               title: x.title,\r\n               url: x.images?.downsized_medium.url\r\n\r\n               }    \r\n\r\n    })\r\n\r\n    \r\n    return ArrGifs;\r\n}","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nexport const Admli = ({Categoria}) => {\r\n\r\n    const {ArrImagenes,Cargando} = useFetchGifs(Categoria);\r\n    return (\r\n        <div className=\"card-grid\">\r\n            <h3 className=\"animate__animated animate__fadeIn\" >Categoria: {Categoria}</h3>\r\n            {/* \r\n            El operador && unicamente devuelve true cuando ambos son true\r\n            es decir que si el primero es true se necesita evaluar el segundo y el\r\n            segundo muesta el msg. Si el primero es falso no se necesita evaluar el\r\n            segundo por que siempre sera falso entonces hace nada.\r\n            */}\r\n            {Cargando && <p className=\"animate__animated animate__flash\">Cargando...</p>} \r\n            <ol>\r\n                {\r\n                    ArrImagenes.map(({title,url,id})=> {\r\n                        return (\r\n                                <div key={id} className=\"card animate__animated animate__fadeIn\">\r\n                                    <img src={url} \r\n                                         alt={title}/>\r\n                                    <p>{title}</p>\r\n                                </div>\r\n                                )\r\n                    })\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport {getArrGifs} from '../helpers/getArrGifs'\r\n\r\nexport const useFetchGifs = (Categoria) => {\r\n\r\n    const [ObjArrImagenes, SetObjArrImagenes] = useState({\r\n        ArrImagenes: [],\r\n        Cargando: true\r\n    })\r\n\r\n    useEffect(()=>{\r\n        getArrGifs(Categoria)\r\n        .then((ArrGifs)=>{\r\n            SetObjArrImagenes({\r\n                ArrImagenes:ArrGifs,\r\n                Cargando: false     \r\n\r\n                })\r\n            }); \r\n            // setTimeout(() => {\r\n   \r\n            // }, 1000);\r\n\r\n    },[Categoria])\r\n\r\n    return ObjArrImagenes; // devueve  {data:[], loading: true}\r\n\r\n}\r\n","import React,{useState} from 'react'\r\nimport { Admli } from './components/Admli';\r\n\r\nconst ShowGifsGIPHY = () => {\r\n    const [TxtCategoriaValor, SetTxtCategoriaValor] = useState('')\r\n    const [ArrCategorias, SetArrCategorias] = useState (['spiderman']);\r\n\r\n    //manejo el evento cuando cambie el txtCategoria\r\n    const change_TxtCategoria=(e)=> {\r\n        SetTxtCategoriaValor(e.target.value); //establezca el nuevo valor del cuadro de texto\r\n\r\n    }\r\n\r\n    //manejo el evento cuando hago enter en el txtCategoria\r\n    const enter_TxtCategoria=(e)=>{\r\n        e.preventDefault(); //detiene la propagacion de un evento\r\n\r\n        if (TxtCategoriaValor.trim().length>0) {\r\n            SetArrCategorias((ArrCategorias)=>[TxtCategoriaValor, ...ArrCategorias]); //establezca el nuevo valor del arreglo categories \r\n            SetTxtCategoriaValor('');   \r\n\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n            <form onSubmit={enter_TxtCategoria}>\r\n                <label>Categoria:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={TxtCategoriaValor} \r\n                    onChange={change_TxtCategoria}\r\n                    name=\"TxtCategoria\"\r\n                />   \r\n                <hr/>\r\n                <ol>\r\n                    {\r\n                        ArrCategorias.map((Categoria)=>(\r\n                            <Admli className=\"card-grid animate__animated animate__bounce animate__delay-10s\" key={Categoria} \r\n                                    Categoria={Categoria}/>))\r\n                    }\r\n              </ol>\r\n            </form>\r\n         )\r\n}\r\n\r\nexport default ShowGifsGIPHY","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ShowGifsGIPHY from './ShowGifsGIPHY';\n\nReactDOM.render(<ShowGifsGIPHY />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}